// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const LoadingEvent: autoguard.serialization.MessageGuard<LoadingEvent> = autoguard.guards.Object.of({
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral.of("loading")
}, {});

export type LoadingEvent = autoguard.guards.Object<{
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral<"loading">
}, {}>;

export const PlayingEvent: autoguard.serialization.MessageGuard<PlayingEvent> = autoguard.guards.Object.of({
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral.of("playing")
}, {});

export type PlayingEvent = autoguard.guards.Object<{
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral<"playing">
}, {}>;

export const PausedEvent: autoguard.serialization.MessageGuard<PausedEvent> = autoguard.guards.Object.of({
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral.of("paused")
}, {});

export type PausedEvent = autoguard.guards.Object<{
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral<"paused">
}, {}>;

export const StoppedEvent: autoguard.serialization.MessageGuard<StoppedEvent> = autoguard.guards.Object.of({
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral.of("stopped"),
	"reason": autoguard.guards.String
}, {});

export type StoppedEvent = autoguard.guards.Object<{
	"sessionID": autoguard.guards.Number,
	"state": autoguard.guards.StringLiteral<"stopped">,
	"reason": autoguard.guards.String
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"LoadingEvent": autoguard.guards.Reference.of(() => LoadingEvent),
		"PlayingEvent": autoguard.guards.Reference.of(() => PlayingEvent),
		"PausedEvent": autoguard.guards.Reference.of(() => PausedEvent),
		"StoppedEvent": autoguard.guards.Reference.of(() => StoppedEvent)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
