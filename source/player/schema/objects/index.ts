// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";
import { AlbumContext } from "../../../api/schema/objects";
import { ArtistContext } from "../../../api/schema/objects";
import { DirectoryContext } from "../../../api/schema/objects";
import { DiscContext } from "../../../api/schema/objects";
import { EpisodeContext } from "../../../api/schema/objects";
import { FileContext } from "../../../api/schema/objects";
import { MovieContext } from "../../../api/schema/objects";
import { PlaylistContext } from "../../../api/schema/objects";
import { SeasonContext } from "../../../api/schema/objects";
import { ShowContext } from "../../../api/schema/objects";
import { TrackContext } from "../../../api/schema/objects";
import { YearContext } from "../../../api/schema/objects";

export const ContextAlbum: autoguard.serialization.MessageGuard<ContextAlbum> = autoguard.guards.Reference.of(() => AlbumContext);

export type ContextAlbum = autoguard.guards.Reference<AlbumContext>;

export const ContextArtist: autoguard.serialization.MessageGuard<ContextArtist> = autoguard.guards.Reference.of(() => ArtistContext);

export type ContextArtist = autoguard.guards.Reference<ArtistContext>;

export const ContextDisc: autoguard.serialization.MessageGuard<ContextDisc> = autoguard.guards.Reference.of(() => DiscContext);

export type ContextDisc = autoguard.guards.Reference<DiscContext>;

export const ContextTrack: autoguard.serialization.MessageGuard<ContextTrack> = autoguard.guards.Reference.of(() => TrackContext);

export type ContextTrack = autoguard.guards.Reference<TrackContext>;

export const ContextPlaylist: autoguard.serialization.MessageGuard<ContextPlaylist> = autoguard.guards.Reference.of(() => PlaylistContext);

export type ContextPlaylist = autoguard.guards.Reference<PlaylistContext>;

export const ContextMovie: autoguard.serialization.MessageGuard<ContextMovie> = autoguard.guards.Reference.of(() => MovieContext);

export type ContextMovie = autoguard.guards.Reference<MovieContext>;

export const ContextShow: autoguard.serialization.MessageGuard<ContextShow> = autoguard.guards.Reference.of(() => ShowContext);

export type ContextShow = autoguard.guards.Reference<ShowContext>;

export const ContextSeason: autoguard.serialization.MessageGuard<ContextSeason> = autoguard.guards.Reference.of(() => SeasonContext);

export type ContextSeason = autoguard.guards.Reference<SeasonContext>;

export const ContextEpisode: autoguard.serialization.MessageGuard<ContextEpisode> = autoguard.guards.Reference.of(() => EpisodeContext);

export type ContextEpisode = autoguard.guards.Reference<EpisodeContext>;

export const ContextYear: autoguard.serialization.MessageGuard<ContextYear> = autoguard.guards.Reference.of(() => YearContext);

export type ContextYear = autoguard.guards.Reference<YearContext>;

export const ContextDirectory: autoguard.serialization.MessageGuard<ContextDirectory> = autoguard.guards.Reference.of(() => DirectoryContext);

export type ContextDirectory = autoguard.guards.Reference<DirectoryContext>;

export const ContextFile: autoguard.serialization.MessageGuard<ContextFile> = autoguard.guards.Reference.of(() => FileContext);

export type ContextFile = autoguard.guards.Reference<FileContext>;

export const Context: autoguard.serialization.MessageGuard<Context> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => ContextAlbum),
	autoguard.guards.Reference.of(() => ContextArtist),
	autoguard.guards.Reference.of(() => ContextDisc),
	autoguard.guards.Reference.of(() => ContextTrack),
	autoguard.guards.Reference.of(() => ContextPlaylist),
	autoguard.guards.Reference.of(() => ContextMovie),
	autoguard.guards.Reference.of(() => ContextShow),
	autoguard.guards.Reference.of(() => ContextSeason),
	autoguard.guards.Reference.of(() => ContextEpisode),
	autoguard.guards.Reference.of(() => ContextYear),
	autoguard.guards.Reference.of(() => ContextDirectory),
	autoguard.guards.Reference.of(() => ContextFile)
);

export type Context = autoguard.guards.Union<[
	autoguard.guards.Reference<ContextAlbum>,
	autoguard.guards.Reference<ContextArtist>,
	autoguard.guards.Reference<ContextDisc>,
	autoguard.guards.Reference<ContextTrack>,
	autoguard.guards.Reference<ContextPlaylist>,
	autoguard.guards.Reference<ContextMovie>,
	autoguard.guards.Reference<ContextShow>,
	autoguard.guards.Reference<ContextSeason>,
	autoguard.guards.Reference<ContextEpisode>,
	autoguard.guards.Reference<ContextYear>,
	autoguard.guards.Reference<ContextDirectory>,
	autoguard.guards.Reference<ContextFile>
]>;

export const ContextItem: autoguard.serialization.MessageGuard<ContextItem> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => ContextTrack),
	autoguard.guards.Reference.of(() => ContextMovie),
	autoguard.guards.Reference.of(() => ContextEpisode),
	autoguard.guards.Reference.of(() => ContextFile)
);

export type ContextItem = autoguard.guards.Union<[
	autoguard.guards.Reference<ContextTrack>,
	autoguard.guards.Reference<ContextMovie>,
	autoguard.guards.Reference<ContextEpisode>,
	autoguard.guards.Reference<ContextFile>
]>;

export const Device: autoguard.serialization.MessageGuard<Device> = autoguard.guards.Object.of({
	"did": autoguard.guards.String,
	"id": autoguard.guards.String,
	"protocol": autoguard.guards.String,
	"name": autoguard.guards.String,
	"type": autoguard.guards.String
}, {});

export type Device = autoguard.guards.Object<{
	"did": autoguard.guards.String,
	"id": autoguard.guards.String,
	"protocol": autoguard.guards.String,
	"name": autoguard.guards.String,
	"type": autoguard.guards.String
}, {}>;

export const Session: autoguard.serialization.MessageGuard<Session> = autoguard.guards.Object.of({
	"playback": autoguard.guards.Boolean,
	"playing": autoguard.guards.Boolean,
	"repeat": autoguard.guards.Boolean,
	"shuffle": autoguard.guards.Boolean
}, {
	"context": autoguard.guards.Reference.of(() => Context),
	"device": autoguard.guards.Reference.of(() => Device),
	"index": autoguard.guards.Number,
	"order": autoguard.guards.Array.of(autoguard.guards.Number),
	"progress": autoguard.guards.Number
});

export type Session = autoguard.guards.Object<{
	"playback": autoguard.guards.Boolean,
	"playing": autoguard.guards.Boolean,
	"repeat": autoguard.guards.Boolean,
	"shuffle": autoguard.guards.Boolean
}, {
	"context": autoguard.guards.Reference<Context>,
	"device": autoguard.guards.Reference<Device>,
	"index": autoguard.guards.Number,
	"order": autoguard.guards.Array<autoguard.guards.Number>,
	"progress": autoguard.guards.Number
}>;

export namespace Autoguard {
	export const Guards = {
		"ContextAlbum": autoguard.guards.Reference.of(() => ContextAlbum),
		"ContextArtist": autoguard.guards.Reference.of(() => ContextArtist),
		"ContextDisc": autoguard.guards.Reference.of(() => ContextDisc),
		"ContextTrack": autoguard.guards.Reference.of(() => ContextTrack),
		"ContextPlaylist": autoguard.guards.Reference.of(() => ContextPlaylist),
		"ContextMovie": autoguard.guards.Reference.of(() => ContextMovie),
		"ContextShow": autoguard.guards.Reference.of(() => ContextShow),
		"ContextSeason": autoguard.guards.Reference.of(() => ContextSeason),
		"ContextEpisode": autoguard.guards.Reference.of(() => ContextEpisode),
		"ContextYear": autoguard.guards.Reference.of(() => ContextYear),
		"ContextDirectory": autoguard.guards.Reference.of(() => ContextDirectory),
		"ContextFile": autoguard.guards.Reference.of(() => ContextFile),
		"Context": autoguard.guards.Reference.of(() => Context),
		"ContextItem": autoguard.guards.Reference.of(() => ContextItem),
		"Device": autoguard.guards.Reference.of(() => Device),
		"Session": autoguard.guards.Reference.of(() => Session)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
