// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";
import { Context } from ".././objects";
import { Device } from ".././objects";

export const SetContext: autoguard.serialization.MessageGuard<SetContext> = autoguard.guards.Object.of({}, {
	"context": autoguard.guards.Reference.of(() => Context)
});

export type SetContext = autoguard.guards.Object<{}, {
	"context": autoguard.guards.Reference<Context>
}>;

export const SetDevice: autoguard.serialization.MessageGuard<SetDevice> = autoguard.guards.Object.of({}, {
	"device": autoguard.guards.Reference.of(() => Device)
});

export type SetDevice = autoguard.guards.Object<{}, {
	"device": autoguard.guards.Reference<Device>
}>;

export const SetDevices: autoguard.serialization.MessageGuard<SetDevices> = autoguard.guards.Object.of({
	"devices": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Device))
}, {});

export type SetDevices = autoguard.guards.Object<{
	"devices": autoguard.guards.Array<autoguard.guards.Reference<Device>>
}, {}>;

export const SetIndex: autoguard.serialization.MessageGuard<SetIndex> = autoguard.guards.Object.of({}, {
	"index": autoguard.guards.Number
});

export type SetIndex = autoguard.guards.Object<{}, {
	"index": autoguard.guards.Number
}>;

export const SetLocalDevice: autoguard.serialization.MessageGuard<SetLocalDevice> = autoguard.guards.Object.of({
	"device": autoguard.guards.Reference.of(() => Device)
}, {});

export type SetLocalDevice = autoguard.guards.Object<{
	"device": autoguard.guards.Reference<Device>
}, {}>;

export const SetOrder: autoguard.serialization.MessageGuard<SetOrder> = autoguard.guards.Object.of({}, {
	"order": autoguard.guards.Array.of(autoguard.guards.Number)
});

export type SetOrder = autoguard.guards.Object<{}, {
	"order": autoguard.guards.Array<autoguard.guards.Number>
}>;

export const SetPlayback: autoguard.serialization.MessageGuard<SetPlayback> = autoguard.guards.Object.of({
	"playback": autoguard.guards.Boolean
}, {});

export type SetPlayback = autoguard.guards.Object<{
	"playback": autoguard.guards.Boolean
}, {}>;

export const SetProgress: autoguard.serialization.MessageGuard<SetProgress> = autoguard.guards.Object.of({}, {
	"progress": autoguard.guards.Number
});

export type SetProgress = autoguard.guards.Object<{}, {
	"progress": autoguard.guards.Number
}>;

export const SetRepeat: autoguard.serialization.MessageGuard<SetRepeat> = autoguard.guards.Object.of({
	"repeat": autoguard.guards.Boolean
}, {});

export type SetRepeat = autoguard.guards.Object<{
	"repeat": autoguard.guards.Boolean
}, {}>;

export const SetShuffle: autoguard.serialization.MessageGuard<SetShuffle> = autoguard.guards.Object.of({
	"shuffle": autoguard.guards.Boolean
}, {});

export type SetShuffle = autoguard.guards.Object<{
	"shuffle": autoguard.guards.Boolean
}, {}>;

export const SetToken: autoguard.serialization.MessageGuard<SetToken> = autoguard.guards.Object.of({}, {
	"token": autoguard.guards.String
});

export type SetToken = autoguard.guards.Object<{}, {
	"token": autoguard.guards.String
}>;

export namespace Autoguard {
	export const Guards = {
		"SetContext": autoguard.guards.Reference.of(() => SetContext),
		"SetDevice": autoguard.guards.Reference.of(() => SetDevice),
		"SetDevices": autoguard.guards.Reference.of(() => SetDevices),
		"SetIndex": autoguard.guards.Reference.of(() => SetIndex),
		"SetLocalDevice": autoguard.guards.Reference.of(() => SetLocalDevice),
		"SetOrder": autoguard.guards.Reference.of(() => SetOrder),
		"SetPlayback": autoguard.guards.Reference.of(() => SetPlayback),
		"SetProgress": autoguard.guards.Reference.of(() => SetProgress),
		"SetRepeat": autoguard.guards.Reference.of(() => SetRepeat),
		"SetShuffle": autoguard.guards.Reference.of(() => SetShuffle),
		"SetToken": autoguard.guards.Reference.of(() => SetToken)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
