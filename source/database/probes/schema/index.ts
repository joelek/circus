// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const EpisodeMetadata = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("episode"),
	"title": autoguard.guards.String,
	"season": autoguard.guards.Number,
	"episode": autoguard.guards.Number,
	"year": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	),
	"summary": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	),
	"show": autoguard.guards.Object.of({
		"title": autoguard.guards.String,
		"summary": autoguard.guards.Union.of(
			autoguard.guards.String,
			autoguard.guards.Undefined
		),
		"genres": autoguard.guards.Array.of(autoguard.guards.String),
		"actors": autoguard.guards.Array.of(autoguard.guards.String)
	}),
	"copyright": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type EpisodeMetadata = ReturnType<typeof EpisodeMetadata["as"]>;

export const MovieMetadata = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("movie"),
	"title": autoguard.guards.String,
	"year": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	),
	"summary": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	),
	"genres": autoguard.guards.Array.of(autoguard.guards.String),
	"actors": autoguard.guards.Array.of(autoguard.guards.String),
	"copyright": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type MovieMetadata = ReturnType<typeof MovieMetadata["as"]>;

export const TrackMetadata = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("track"),
	"title": autoguard.guards.String,
	"disc": autoguard.guards.Number,
	"track": autoguard.guards.Number,
	"album": autoguard.guards.Object.of({
		"title": autoguard.guards.String,
		"year": autoguard.guards.Union.of(
			autoguard.guards.Number,
			autoguard.guards.Undefined
		),
		"artists": autoguard.guards.Array.of(autoguard.guards.String)
	}),
	"artists": autoguard.guards.Array.of(autoguard.guards.String),
	"copyright": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type TrackMetadata = ReturnType<typeof TrackMetadata["as"]>;

export const AlbumMetadata = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("album"),
	"title": autoguard.guards.String,
	"disc": autoguard.guards.Number,
	"year": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	),
	"artists": autoguard.guards.Array.of(autoguard.guards.String),
	"tracks": autoguard.guards.Array.of(autoguard.guards.Object.of({
		"title": autoguard.guards.String,
		"artists": autoguard.guards.Array.of(autoguard.guards.String),
		"copyright": autoguard.guards.Union.of(
			autoguard.guards.String,
			autoguard.guards.Undefined
		)
	})),
	"copyright": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type AlbumMetadata = ReturnType<typeof AlbumMetadata["as"]>;

export const Metadata = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => EpisodeMetadata),
	autoguard.guards.Reference.of(() => MovieMetadata),
	autoguard.guards.Reference.of(() => TrackMetadata),
	autoguard.guards.Reference.of(() => AlbumMetadata)
);

export type Metadata = ReturnType<typeof Metadata["as"]>;

export const AudioResource = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("audio"),
	"duration_ms": autoguard.guards.Number
});

export type AudioResource = ReturnType<typeof AudioResource["as"]>;

export const ImageResource = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("image"),
	"width": autoguard.guards.Number,
	"height": autoguard.guards.Number
});

export type ImageResource = ReturnType<typeof ImageResource["as"]>;

export const MetadataResource = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("metadata")
});

export type MetadataResource = ReturnType<typeof MetadataResource["as"]>;

export const SubtitleResource = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("subtitle"),
	"duration_ms": autoguard.guards.Number,
	"language": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	),
	"cues": autoguard.guards.Array.of(autoguard.guards.Object.of({
		"start_ms": autoguard.guards.Number,
		"duration_ms": autoguard.guards.Number,
		"lines": autoguard.guards.Array.of(autoguard.guards.String)
	}))
});

export type SubtitleResource = ReturnType<typeof SubtitleResource["as"]>;

export const VideoResource = autoguard.guards.Object.of({
	"type": autoguard.guards.StringLiteral.of("video"),
	"duration_ms": autoguard.guards.Number,
	"width": autoguard.guards.Number,
	"height": autoguard.guards.Number
});

export type VideoResource = ReturnType<typeof VideoResource["as"]>;

export const Resource = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => AudioResource),
	autoguard.guards.Reference.of(() => ImageResource),
	autoguard.guards.Reference.of(() => MetadataResource),
	autoguard.guards.Reference.of(() => SubtitleResource),
	autoguard.guards.Reference.of(() => VideoResource)
);

export type Resource = ReturnType<typeof Resource["as"]>;

export const Probe = autoguard.guards.Object.of({
	"metadata": autoguard.guards.Union.of(
		autoguard.guards.Reference.of(() => Metadata),
		autoguard.guards.Undefined
	),
	"resources": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Resource))
});

export type Probe = ReturnType<typeof Probe["as"]>;

export namespace Autoguard {
	export const Guards = {
		"EpisodeMetadata": autoguard.guards.Reference.of(() => EpisodeMetadata),
		"MovieMetadata": autoguard.guards.Reference.of(() => MovieMetadata),
		"TrackMetadata": autoguard.guards.Reference.of(() => TrackMetadata),
		"AlbumMetadata": autoguard.guards.Reference.of(() => AlbumMetadata),
		"Metadata": autoguard.guards.Reference.of(() => Metadata),
		"AudioResource": autoguard.guards.Reference.of(() => AudioResource),
		"ImageResource": autoguard.guards.Reference.of(() => ImageResource),
		"MetadataResource": autoguard.guards.Reference.of(() => MetadataResource),
		"SubtitleResource": autoguard.guards.Reference.of(() => SubtitleResource),
		"VideoResource": autoguard.guards.Reference.of(() => VideoResource),
		"Resource": autoguard.guards.Reference.of(() => Resource),
		"Probe": autoguard.guards.Reference.of(() => Probe)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
