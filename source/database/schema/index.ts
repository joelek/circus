// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const Directory = autoguard.guards.Object.of({
	"directory_id": autoguard.guards.String,
	"name": autoguard.guards.String,
	"parent_directory_id": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type Directory = ReturnType<typeof Directory["as"]>;

export const File = autoguard.guards.Object.of({
	"file_id": autoguard.guards.String,
	"name": autoguard.guards.String,
	"parent_directory_id": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	),
	"index_timestamp": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	),
	"size": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	)
});

export type File = ReturnType<typeof File["as"]>;

export const AudioFile = autoguard.guards.Object.of({
	"file_id": autoguard.guards.String,
	"mime": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("audio/mp4"),
		autoguard.guards.StringLiteral.of("audio/mp3")
	),
	"duration_ms": autoguard.guards.Number
});

export type AudioFile = ReturnType<typeof AudioFile["as"]>;

export const ImageFile = autoguard.guards.Object.of({
	"file_id": autoguard.guards.String,
	"mime": autoguard.guards.StringLiteral.of("image/jpeg"),
	"width": autoguard.guards.Number,
	"height": autoguard.guards.Number
});

export type ImageFile = ReturnType<typeof ImageFile["as"]>;

export const MetadataFile = autoguard.guards.Object.of({
	"file_id": autoguard.guards.String,
	"mime": autoguard.guards.StringLiteral.of("application/json")
});

export type MetadataFile = ReturnType<typeof MetadataFile["as"]>;

export const SubtitleFile = autoguard.guards.Object.of({
	"file_id": autoguard.guards.String,
	"mime": autoguard.guards.StringLiteral.of("text/vtt"),
	"duration_ms": autoguard.guards.Number,
	"language": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type SubtitleFile = ReturnType<typeof SubtitleFile["as"]>;

export const VideoFile = autoguard.guards.Object.of({
	"file_id": autoguard.guards.String,
	"mime": autoguard.guards.StringLiteral.of("video/mp4"),
	"duration_ms": autoguard.guards.Number,
	"width": autoguard.guards.Number,
	"height": autoguard.guards.Number
});

export type VideoFile = ReturnType<typeof VideoFile["as"]>;

export const VideoSubtitle = autoguard.guards.Object.of({
	"video_file_id": autoguard.guards.String,
	"subtitle_file_id": autoguard.guards.String
});

export type VideoSubtitle = ReturnType<typeof VideoSubtitle["as"]>;

export const Artist = autoguard.guards.Object.of({
	"artist_id": autoguard.guards.String,
	"name": autoguard.guards.String
});

export type Artist = ReturnType<typeof Artist["as"]>;

export const Album = autoguard.guards.Object.of({
	"album_id": autoguard.guards.String,
	"title": autoguard.guards.String,
	"year": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	)
});

export type Album = ReturnType<typeof Album["as"]>;

export const AlbumFile = autoguard.guards.Object.of({
	"album_id": autoguard.guards.String,
	"file_id": autoguard.guards.String
});

export type AlbumFile = ReturnType<typeof AlbumFile["as"]>;

export const Disc = autoguard.guards.Object.of({
	"disc_id": autoguard.guards.String,
	"album_id": autoguard.guards.String,
	"number": autoguard.guards.Number
});

export type Disc = ReturnType<typeof Disc["as"]>;

export const Track = autoguard.guards.Object.of({
	"track_id": autoguard.guards.String,
	"disc_id": autoguard.guards.String,
	"title": autoguard.guards.String,
	"number": autoguard.guards.Number,
	"copyright": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type Track = ReturnType<typeof Track["as"]>;

export const TrackFile = autoguard.guards.Object.of({
	"track_id": autoguard.guards.String,
	"file_id": autoguard.guards.String
});

export type TrackFile = ReturnType<typeof TrackFile["as"]>;

export const AlbumArtist = autoguard.guards.Object.of({
	"album_id": autoguard.guards.String,
	"artist_id": autoguard.guards.String,
	"order": autoguard.guards.Number
});

export type AlbumArtist = ReturnType<typeof AlbumArtist["as"]>;

export const TrackArtist = autoguard.guards.Object.of({
	"track_id": autoguard.guards.String,
	"artist_id": autoguard.guards.String,
	"order": autoguard.guards.Number
});

export type TrackArtist = ReturnType<typeof TrackArtist["as"]>;

export const Show = autoguard.guards.Object.of({
	"show_id": autoguard.guards.String,
	"name": autoguard.guards.String,
	"summary": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type Show = ReturnType<typeof Show["as"]>;

export const ShowFile = autoguard.guards.Object.of({
	"show_id": autoguard.guards.String,
	"file_id": autoguard.guards.String
});

export type ShowFile = ReturnType<typeof ShowFile["as"]>;

export const Season = autoguard.guards.Object.of({
	"season_id": autoguard.guards.String,
	"show_id": autoguard.guards.String,
	"number": autoguard.guards.Number
});

export type Season = ReturnType<typeof Season["as"]>;

export const Episode = autoguard.guards.Object.of({
	"episode_id": autoguard.guards.String,
	"season_id": autoguard.guards.String,
	"title": autoguard.guards.String,
	"number": autoguard.guards.Number,
	"year": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	),
	"summary": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	),
	"copyright": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type Episode = ReturnType<typeof Episode["as"]>;

export const EpisodeFile = autoguard.guards.Object.of({
	"episode_id": autoguard.guards.String,
	"file_id": autoguard.guards.String
});

export type EpisodeFile = ReturnType<typeof EpisodeFile["as"]>;

export const Movie = autoguard.guards.Object.of({
	"movie_id": autoguard.guards.String,
	"title": autoguard.guards.String,
	"year": autoguard.guards.Union.of(
		autoguard.guards.Number,
		autoguard.guards.Undefined
	),
	"summary": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	),
	"copyright": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type Movie = ReturnType<typeof Movie["as"]>;

export const MovieFile = autoguard.guards.Object.of({
	"movie_id": autoguard.guards.String,
	"file_id": autoguard.guards.String
});

export type MovieFile = ReturnType<typeof MovieFile["as"]>;

export const Actor = autoguard.guards.Object.of({
	"actor_id": autoguard.guards.String,
	"name": autoguard.guards.String
});

export type Actor = ReturnType<typeof Actor["as"]>;

export const MovieActor = autoguard.guards.Object.of({
	"movie_id": autoguard.guards.String,
	"actor_id": autoguard.guards.String,
	"order": autoguard.guards.Number
});

export type MovieActor = ReturnType<typeof MovieActor["as"]>;

export const ShowActor = autoguard.guards.Object.of({
	"show_id": autoguard.guards.String,
	"actor_id": autoguard.guards.String,
	"order": autoguard.guards.Number
});

export type ShowActor = ReturnType<typeof ShowActor["as"]>;

export const Genre = autoguard.guards.Object.of({
	"genre_id": autoguard.guards.String,
	"name": autoguard.guards.String
});

export type Genre = ReturnType<typeof Genre["as"]>;

export const MovieGenre = autoguard.guards.Object.of({
	"movie_id": autoguard.guards.String,
	"genre_id": autoguard.guards.String,
	"order": autoguard.guards.Number
});

export type MovieGenre = ReturnType<typeof MovieGenre["as"]>;

export const ShowGenre = autoguard.guards.Object.of({
	"show_id": autoguard.guards.String,
	"genre_id": autoguard.guards.String,
	"order": autoguard.guards.Number
});

export type ShowGenre = ReturnType<typeof ShowGenre["as"]>;

export const Subtitle = autoguard.guards.Object.of({
	"subtitle_id": autoguard.guards.String,
	"file_id": autoguard.guards.String
});

export type Subtitle = ReturnType<typeof Subtitle["as"]>;

export const Cue = autoguard.guards.Object.of({
	"cue_id": autoguard.guards.String,
	"subtitle_id": autoguard.guards.String,
	"start_ms": autoguard.guards.Number,
	"duration_ms": autoguard.guards.Number,
	"lines": autoguard.guards.String
});

export type Cue = ReturnType<typeof Cue["as"]>;

export const User = autoguard.guards.Object.of({
	"user_id": autoguard.guards.String,
	"name": autoguard.guards.String,
	"username": autoguard.guards.String,
	"password": autoguard.guards.String
});

export type User = ReturnType<typeof User["as"]>;

export const Key = autoguard.guards.Object.of({
	"key_id": autoguard.guards.String,
	"user_id": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Undefined
	)
});

export type Key = ReturnType<typeof Key["as"]>;

export const Token = autoguard.guards.Object.of({
	"token_id": autoguard.guards.String,
	"user_id": autoguard.guards.String,
	"hash": autoguard.guards.String,
	"expires_ms": autoguard.guards.Number
});

export type Token = ReturnType<typeof Token["as"]>;

export const Stream = autoguard.guards.Object.of({
	"stream_id": autoguard.guards.String,
	"user_id": autoguard.guards.String,
	"file_id": autoguard.guards.String,
	"timestamp_ms": autoguard.guards.Number
});

export type Stream = ReturnType<typeof Stream["as"]>;

export const Playlist = autoguard.guards.Object.of({
	"playlist_id": autoguard.guards.String,
	"title": autoguard.guards.String,
	"description": autoguard.guards.String,
	"user_id": autoguard.guards.String
});

export type Playlist = ReturnType<typeof Playlist["as"]>;

export const PlaylistItem = autoguard.guards.Object.of({
	"playlist_item_id": autoguard.guards.String,
	"playlist_id": autoguard.guards.String,
	"track_id": autoguard.guards.String,
	"number": autoguard.guards.Number,
	"added_ms": autoguard.guards.Number
});

export type PlaylistItem = ReturnType<typeof PlaylistItem["as"]>;

export const Year = autoguard.guards.Object.of({
	"year_id": autoguard.guards.String,
	"year": autoguard.guards.Number
});

export type Year = ReturnType<typeof Year["as"]>;

export namespace Autoguard {
	export const Guards = {
		"Directory": autoguard.guards.Reference.of(() => Directory),
		"File": autoguard.guards.Reference.of(() => File),
		"AudioFile": autoguard.guards.Reference.of(() => AudioFile),
		"ImageFile": autoguard.guards.Reference.of(() => ImageFile),
		"MetadataFile": autoguard.guards.Reference.of(() => MetadataFile),
		"SubtitleFile": autoguard.guards.Reference.of(() => SubtitleFile),
		"VideoFile": autoguard.guards.Reference.of(() => VideoFile),
		"VideoSubtitle": autoguard.guards.Reference.of(() => VideoSubtitle),
		"Artist": autoguard.guards.Reference.of(() => Artist),
		"Album": autoguard.guards.Reference.of(() => Album),
		"AlbumFile": autoguard.guards.Reference.of(() => AlbumFile),
		"Disc": autoguard.guards.Reference.of(() => Disc),
		"Track": autoguard.guards.Reference.of(() => Track),
		"TrackFile": autoguard.guards.Reference.of(() => TrackFile),
		"AlbumArtist": autoguard.guards.Reference.of(() => AlbumArtist),
		"TrackArtist": autoguard.guards.Reference.of(() => TrackArtist),
		"Show": autoguard.guards.Reference.of(() => Show),
		"ShowFile": autoguard.guards.Reference.of(() => ShowFile),
		"Season": autoguard.guards.Reference.of(() => Season),
		"Episode": autoguard.guards.Reference.of(() => Episode),
		"EpisodeFile": autoguard.guards.Reference.of(() => EpisodeFile),
		"Movie": autoguard.guards.Reference.of(() => Movie),
		"MovieFile": autoguard.guards.Reference.of(() => MovieFile),
		"Actor": autoguard.guards.Reference.of(() => Actor),
		"MovieActor": autoguard.guards.Reference.of(() => MovieActor),
		"ShowActor": autoguard.guards.Reference.of(() => ShowActor),
		"Genre": autoguard.guards.Reference.of(() => Genre),
		"MovieGenre": autoguard.guards.Reference.of(() => MovieGenre),
		"ShowGenre": autoguard.guards.Reference.of(() => ShowGenre),
		"Subtitle": autoguard.guards.Reference.of(() => Subtitle),
		"Cue": autoguard.guards.Reference.of(() => Cue),
		"User": autoguard.guards.Reference.of(() => User),
		"Key": autoguard.guards.Reference.of(() => Key),
		"Token": autoguard.guards.Reference.of(() => Token),
		"Stream": autoguard.guards.Reference.of(() => Stream),
		"Playlist": autoguard.guards.Reference.of(() => Playlist),
		"PlaylistItem": autoguard.guards.Reference.of(() => PlaylistItem),
		"Year": autoguard.guards.Reference.of(() => Year)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
