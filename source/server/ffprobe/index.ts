// This file was auto-generated by @joelek/autoguard. Edit at own risk.

import * as autoguard from "@joelek/autoguard/dist/lib-shared";

export const VideoFrame: autoguard.serialization.MessageGuard<VideoFrame> = autoguard.guards.Object.of({
	"pkt_pts_time": autoguard.guards.String
}, {});

export type VideoFrame = autoguard.guards.Object<{
	"pkt_pts_time": autoguard.guards.String
}, {}>;

export const FramesResult: autoguard.serialization.MessageGuard<FramesResult> = autoguard.guards.Object.of({
	"frames": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => VideoFrame))
}, {});

export type FramesResult = autoguard.guards.Object<{
	"frames": autoguard.guards.Array<autoguard.guards.Reference<VideoFrame>>
}, {}>;

export const StreamCommon: autoguard.serialization.MessageGuard<StreamCommon> = autoguard.guards.Object.of({
	"codec_name": autoguard.guards.String
}, {});

export type StreamCommon = autoguard.guards.Object<{
	"codec_name": autoguard.guards.String
}, {}>;

export const AudioStream: autoguard.serialization.MessageGuard<AudioStream> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => StreamCommon),
	autoguard.guards.Object.of({
		"codec_type": autoguard.guards.StringLiteral.of("audio"),
		"start_time": autoguard.guards.String,
		"duration": autoguard.guards.String
	}, {})
);

export type AudioStream = autoguard.guards.Intersection<[
	autoguard.guards.Reference<StreamCommon>,
	autoguard.guards.Object<{
		"codec_type": autoguard.guards.StringLiteral<"audio">,
		"start_time": autoguard.guards.String,
		"duration": autoguard.guards.String
	}, {}>
]>;

export const ImageStream: autoguard.serialization.MessageGuard<ImageStream> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => StreamCommon),
	autoguard.guards.Object.of({
		"codec_type": autoguard.guards.StringLiteral.of("video"),
		"codec_time_base": autoguard.guards.StringLiteral.of("0/1"),
		"width": autoguard.guards.Number,
		"height": autoguard.guards.Number
	}, {})
);

export type ImageStream = autoguard.guards.Intersection<[
	autoguard.guards.Reference<StreamCommon>,
	autoguard.guards.Object<{
		"codec_type": autoguard.guards.StringLiteral<"video">,
		"codec_time_base": autoguard.guards.StringLiteral<"0/1">,
		"width": autoguard.guards.Number,
		"height": autoguard.guards.Number
	}, {}>
]>;

export const SubtitleStream: autoguard.serialization.MessageGuard<SubtitleStream> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => StreamCommon),
	autoguard.guards.Object.of({
		"codec_type": autoguard.guards.StringLiteral.of("subtitle")
	}, {})
);

export type SubtitleStream = autoguard.guards.Intersection<[
	autoguard.guards.Reference<StreamCommon>,
	autoguard.guards.Object<{
		"codec_type": autoguard.guards.StringLiteral<"subtitle">
	}, {}>
]>;

export const VideoStream: autoguard.serialization.MessageGuard<VideoStream> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => StreamCommon),
	autoguard.guards.Object.of({
		"codec_type": autoguard.guards.StringLiteral.of("video"),
		"start_time": autoguard.guards.String,
		"duration": autoguard.guards.String,
		"width": autoguard.guards.Number,
		"height": autoguard.guards.Number
	}, {})
);

export type VideoStream = autoguard.guards.Intersection<[
	autoguard.guards.Reference<StreamCommon>,
	autoguard.guards.Object<{
		"codec_type": autoguard.guards.StringLiteral<"video">,
		"start_time": autoguard.guards.String,
		"duration": autoguard.guards.String,
		"width": autoguard.guards.Number,
		"height": autoguard.guards.Number
	}, {}>
]>;

export const Stream: autoguard.serialization.MessageGuard<Stream> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => AudioStream),
	autoguard.guards.Reference.of(() => ImageStream),
	autoguard.guards.Reference.of(() => SubtitleStream),
	autoguard.guards.Reference.of(() => VideoStream)
);

export type Stream = autoguard.guards.Union<[
	autoguard.guards.Reference<AudioStream>,
	autoguard.guards.Reference<ImageStream>,
	autoguard.guards.Reference<SubtitleStream>,
	autoguard.guards.Reference<VideoStream>
]>;

export const StreamsResult: autoguard.serialization.MessageGuard<StreamsResult> = autoguard.guards.Object.of({
	"streams": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Stream))
}, {});

export type StreamsResult = autoguard.guards.Object<{
	"streams": autoguard.guards.Array<autoguard.guards.Reference<Stream>>
}, {}>;

export const Format: autoguard.serialization.MessageGuard<Format> = autoguard.guards.Object.of({
	"format_name": autoguard.guards.String
}, {
	"tags": autoguard.guards.Object.of({}, {
		"title": autoguard.guards.String,
		"date": autoguard.guards.String,
		"comment": autoguard.guards.String,
		"show": autoguard.guards.String,
		"episode_id": autoguard.guards.String,
		"episode_sort": autoguard.guards.String,
		"season_number": autoguard.guards.String,
		"track": autoguard.guards.String,
		"artist": autoguard.guards.String,
		"album_artist": autoguard.guards.String,
		"album": autoguard.guards.String,
		"disc": autoguard.guards.String
	})
});

export type Format = autoguard.guards.Object<{
	"format_name": autoguard.guards.String
}, {
	"tags": autoguard.guards.Object<{}, {
		"title": autoguard.guards.String,
		"date": autoguard.guards.String,
		"comment": autoguard.guards.String,
		"show": autoguard.guards.String,
		"episode_id": autoguard.guards.String,
		"episode_sort": autoguard.guards.String,
		"season_number": autoguard.guards.String,
		"track": autoguard.guards.String,
		"artist": autoguard.guards.String,
		"album_artist": autoguard.guards.String,
		"album": autoguard.guards.String,
		"disc": autoguard.guards.String
	}>
}>;

export const FormatResult: autoguard.serialization.MessageGuard<FormatResult> = autoguard.guards.Object.of({
	"format": autoguard.guards.Reference.of(() => Format)
}, {});

export type FormatResult = autoguard.guards.Object<{
	"format": autoguard.guards.Reference<Format>
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"VideoFrame": autoguard.guards.Reference.of(() => VideoFrame),
		"FramesResult": autoguard.guards.Reference.of(() => FramesResult),
		"StreamCommon": autoguard.guards.Reference.of(() => StreamCommon),
		"AudioStream": autoguard.guards.Reference.of(() => AudioStream),
		"ImageStream": autoguard.guards.Reference.of(() => ImageStream),
		"SubtitleStream": autoguard.guards.Reference.of(() => SubtitleStream),
		"VideoStream": autoguard.guards.Reference.of(() => VideoStream),
		"Stream": autoguard.guards.Reference.of(() => Stream),
		"StreamsResult": autoguard.guards.Reference.of(() => StreamsResult),
		"Format": autoguard.guards.Reference.of(() => Format),
		"FormatResult": autoguard.guards.Reference.of(() => FormatResult)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
