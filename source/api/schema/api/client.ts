// This file was auto-generated by @joelek/autoguard. Edit at own risk.

import * as autoguard from "@joelek/autoguard/dist/lib-client";
import * as shared from "./index";

export type Client = autoguard.api.Client<shared.Autoguard.Requests, shared.Autoguard.Responses>;

export const makeClient = (clientOptions?: autoguard.api.ClientOptions): Client => ({
	"POST:/auth/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["POST:/auth/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "POST";
		let components = new Array<string>();
		components.push("auth");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("x-circus-username", [request.headers?.["x-circus-username"]], true));
		headers.push(...autoguard.api.encodeHeaderPairs("x-circus-password", [request.headers?.["x-circus-password"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["x-circus-token"] = autoguard.api.decodeHeaderValue(raw.headers, "x-circus-token", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["POST:/auth/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"POST:/users/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["POST:/users/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "POST";
		let components = new Array<string>();
		components.push("users");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["POST:/users/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("cues", [request.options?.["cues"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/actors/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/actors/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("actors");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/actors/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/actors/<actor_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/actors/<actor_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("actors");
		components.push(...autoguard.api.encodeComponents([request.options?.["actor_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["actor_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/actors/<actor_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/actors/<actor_id>/movies/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/actors/<actor_id>/movies/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("actors");
		components.push(...autoguard.api.encodeComponents([request.options?.["actor_id"]], true));
		components.push("movies");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["actor_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/actors/<actor_id>/movies/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/actors/<actor_id>/shows/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/actors/<actor_id>/shows/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("actors");
		components.push(...autoguard.api.encodeComponents([request.options?.["actor_id"]], true));
		components.push("shows");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["actor_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/actors/<actor_id>/shows/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/albums/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/albums/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("albums");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/albums/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getNewAlbums": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getNewAlbums"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("albums");
		components.push("new");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getNewAlbums"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/albums/<album_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/albums/<album_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("albums");
		components.push(...autoguard.api.encodeComponents([request.options?.["album_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["album_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/albums/<album_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getAlbumDiscs": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getAlbumDiscs"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("albums");
		components.push(...autoguard.api.encodeComponents([request.options?.["album_id"]], true));
		components.push("discs");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["album_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getAlbumDiscs"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getAlbumContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getAlbumContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("albums");
		components.push(...autoguard.api.encodeComponents([request.options?.["album_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["album_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getAlbumContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/artists/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/artists/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("artists");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/artists/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/artists/<artist_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/artists/<artist_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("artists");
		components.push(...autoguard.api.encodeComponents([request.options?.["artist_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["artist_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/artists/<artist_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getArtistAlbums": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getArtistAlbums"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("artists");
		components.push(...autoguard.api.encodeComponents([request.options?.["artist_id"]], true));
		components.push("albums");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["artist_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getArtistAlbums"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getArtistContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getArtistContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("artists");
		components.push(...autoguard.api.encodeComponents([request.options?.["artist_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["artist_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getArtistContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/discs/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/discs/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("discs");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/discs/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/discs/<disc_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/discs/<disc_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("discs");
		components.push(...autoguard.api.encodeComponents([request.options?.["disc_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["disc_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/discs/<disc_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getDiscTracks": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getDiscTracks"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("discs");
		components.push(...autoguard.api.encodeComponents([request.options?.["disc_id"]], true));
		components.push("tracks");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["disc_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getDiscTracks"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getDiscContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getDiscContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("discs");
		components.push(...autoguard.api.encodeComponents([request.options?.["disc_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["disc_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getDiscContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/episodes/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/episodes/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("episodes");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/episodes/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/episodes/<episode_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/episodes/<episode_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("episodes");
		components.push(...autoguard.api.encodeComponents([request.options?.["episode_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["episode_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/episodes/<episode_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getEpisodeContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getEpisodeContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("episodes");
		components.push(...autoguard.api.encodeComponents([request.options?.["episode_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["episode_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getEpisodeContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/genres/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/genres/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("genres");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/genres/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/genres/<genre_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/genres/<genre_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("genres");
		components.push(...autoguard.api.encodeComponents([request.options?.["genre_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["genre_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/genres/<genre_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/genres/<genre_id>/movies/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/genres/<genre_id>/movies/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("genres");
		components.push(...autoguard.api.encodeComponents([request.options?.["genre_id"]], true));
		components.push("movies");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["genre_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/genres/<genre_id>/movies/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/genres/<genre_id>/shows/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/genres/<genre_id>/shows/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("genres");
		components.push(...autoguard.api.encodeComponents([request.options?.["genre_id"]], true));
		components.push("shows");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["genre_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/genres/<genre_id>/shows/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/categories/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/categories/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("categories");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/categories/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/categories/<category_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/categories/<category_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("categories");
		components.push(...autoguard.api.encodeComponents([request.options?.["category_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["category_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/categories/<category_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/categories/<category_id>/albums/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/categories/<category_id>/albums/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("categories");
		components.push(...autoguard.api.encodeComponents([request.options?.["category_id"]], true));
		components.push("albums");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["category_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/categories/<category_id>/albums/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/movies/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/movies/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("movies");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/movies/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getNewMovies": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getNewMovies"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("movies");
		components.push("new");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getNewMovies"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/movies/<movie_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/movies/<movie_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("movies");
		components.push(...autoguard.api.encodeComponents([request.options?.["movie_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["movie_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/movies/<movie_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/movies/<movie_id>/suggestions/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/movies/<movie_id>/suggestions/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("movies");
		components.push(...autoguard.api.encodeComponents([request.options?.["movie_id"]], true));
		components.push("suggestions");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["movie_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/movies/<movie_id>/suggestions/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getMovieContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getMovieContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("movies");
		components.push(...autoguard.api.encodeComponents([request.options?.["movie_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["movie_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getMovieContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getMovieActors": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getMovieActors"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("movies");
		components.push(...autoguard.api.encodeComponents([request.options?.["movie_id"]], true));
		components.push("actors");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["movie_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getMovieActors"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/playlists/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/playlists/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("playlists");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/playlists/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/playlists/<playlist_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/playlists/<playlist_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("playlists");
		components.push(...autoguard.api.encodeComponents([request.options?.["playlist_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["playlist_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/playlists/<playlist_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getPlaylistItems": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getPlaylistItems"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("playlists");
		components.push(...autoguard.api.encodeComponents([request.options?.["playlist_id"]], true));
		components.push("items");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["playlist_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getPlaylistItems"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getPlaylistContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getPlaylistContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("playlists");
		components.push(...autoguard.api.encodeComponents([request.options?.["playlist_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["playlist_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getPlaylistContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/seasons/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/seasons/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("seasons");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/seasons/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/seasons/<season_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/seasons/<season_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("seasons");
		components.push(...autoguard.api.encodeComponents([request.options?.["season_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["season_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/seasons/<season_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getSeasonEpisodes": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getSeasonEpisodes"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("seasons");
		components.push(...autoguard.api.encodeComponents([request.options?.["season_id"]], true));
		components.push("episodes");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["season_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getSeasonEpisodes"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getSeasonContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getSeasonContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("seasons");
		components.push(...autoguard.api.encodeComponents([request.options?.["season_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["season_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getSeasonContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/shows/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/shows/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("shows");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/shows/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/shows/<show_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/shows/<show_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("shows");
		components.push(...autoguard.api.encodeComponents([request.options?.["show_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["show_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/shows/<show_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getShowSeasons": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getShowSeasons"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("shows");
		components.push(...autoguard.api.encodeComponents([request.options?.["show_id"]], true));
		components.push("seasons");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["show_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getShowSeasons"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getShowContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getShowContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("shows");
		components.push(...autoguard.api.encodeComponents([request.options?.["show_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["show_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getShowContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getShowActors": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getShowActors"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("shows");
		components.push(...autoguard.api.encodeComponents([request.options?.["show_id"]], true));
		components.push("actors");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["show_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getShowActors"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/tracks/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/tracks/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("tracks");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/tracks/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/tracks/<track_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/tracks/<track_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("tracks");
		components.push(...autoguard.api.encodeComponents([request.options?.["track_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["track_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/tracks/<track_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/tracks/<track_id>/playlists/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/tracks/<track_id>/playlists/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("tracks");
		components.push(...autoguard.api.encodeComponents([request.options?.["track_id"]], true));
		components.push("playlists");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["track_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/tracks/<track_id>/playlists/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getTrackContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getTrackContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("tracks");
		components.push(...autoguard.api.encodeComponents([request.options?.["track_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["track_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getTrackContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/users/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/users/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("users");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/users/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/users/<user_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/users/<user_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("users");
		components.push(...autoguard.api.encodeComponents([request.options?.["user_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["user_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/users/<user_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/users/<user_id>/albums/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/users/<user_id>/albums/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("users");
		components.push(...autoguard.api.encodeComponents([request.options?.["user_id"]], true));
		components.push("albums");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["user_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/users/<user_id>/albums/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getUserArtists": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getUserArtists"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("users");
		components.push(...autoguard.api.encodeComponents([request.options?.["user_id"]], true));
		components.push("artists");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["user_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getUserArtists"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/users/<user_id>/playlists/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/users/<user_id>/playlists/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("users");
		components.push(...autoguard.api.encodeComponents([request.options?.["user_id"]], true));
		components.push("playlists");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["user_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/users/<user_id>/playlists/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/users/<user_id>/shows/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/users/<user_id>/shows/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("users");
		components.push(...autoguard.api.encodeComponents([request.options?.["user_id"]], true));
		components.push("shows");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["user_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/users/<user_id>/shows/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/years/<query>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/years/<query>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("years");
		components.push(...autoguard.api.encodeComponents([request.options?.["query"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["query"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/years/<query>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/years/<year_id>/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/years/<year_id>/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("years");
		components.push(...autoguard.api.encodeComponents([request.options?.["year_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["year_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/years/<year_id>/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/years/<year_id>/albums/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/years/<year_id>/albums/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("years");
		components.push(...autoguard.api.encodeComponents([request.options?.["year_id"]], true));
		components.push("albums");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["year_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/years/<year_id>/albums/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/years/<year_id>/movies/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/years/<year_id>/movies/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("years");
		components.push(...autoguard.api.encodeComponents([request.options?.["year_id"]], true));
		components.push("movies");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["year_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/years/<year_id>/movies/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getYearContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getYearContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("years");
		components.push(...autoguard.api.encodeComponents([request.options?.["year_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["year_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getYearContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getDirectory": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getDirectory"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("directories");
		components.push(...autoguard.api.encodeComponents([request.options?.["directory_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["directory_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getDirectory"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getDirectoryDirectories": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getDirectoryDirectories"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("directories");
		components.push(...autoguard.api.encodeComponents([request.options?.["directory_id"]], true));
		components.push("directories");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["directory_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getDirectoryDirectories"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getDirectoryFiles": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getDirectoryFiles"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("directories");
		components.push(...autoguard.api.encodeComponents([request.options?.["directory_id"]], true));
		components.push("files");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("anchor", [request.options?.["anchor"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("offset", [request.options?.["offset"]], false));
		parameters.push(...autoguard.api.encodeParameterPairs("limit", [request.options?.["limit"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["directory_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getDirectoryFiles"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getDirectoryContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getDirectoryContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("directories");
		components.push(...autoguard.api.encodeComponents([request.options?.["directory_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["directory_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getDirectoryContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getFile": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getFile"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("files");
		components.push(...autoguard.api.encodeComponents([request.options?.["file_id"]], true));
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["file_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getFile"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getFileContext": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getFileContext"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("files");
		components.push(...autoguard.api.encodeComponents([request.options?.["file_id"]], true));
		components.push("context");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["file_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getFileContext"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"getFileContent": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getFileContent"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("files");
		components.push(...autoguard.api.encodeComponents([request.options?.["file_id"]], true));
		components.push("content");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["file_id"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getFileContent"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/statistics/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/statistics/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("statistics");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("token", [request.options?.["token"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/statistics/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
});
